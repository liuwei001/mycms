//apply plugin: 'war'  					 //指定web项目，项目编译时生成项目的war包
apply plugin: 'eclipse-wtp'  			 //插件将构建web项目的开发环境，生成所需要的.project,.classpath等文件
apply plugin: 'maven'  				//使用maven做为jar包的信赖管理，通过mave仓库下载项目所需的信赖包
apply plugin: "maven-publish"    //上传jar包到mave仓库
apply plugin: 'jetty'						//加入jetty的支持，代码修改后直接执行命令gradle jettyRun即可运行web项目

sourceCompatibility = 1.6 // 设置 JDK 版本
targetCompatibility = 1.6  //设置目标发行版本

group = 'com.klht.cms' //组id
version = '' //版本信息

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'//设置编码

repositories {
     mavenLocal() //从本地仓库下载jar包      
     mavenCentral()   //从中央仓库下载
     maven { url "http://maven.oschina.net/content/groups/public" }
     maven { url "http://download.java.net/maven/2/" }
     maven { url "http://repo.spring.io/release/" }
     maven { url "http://repo.maven.apache.org/maven2" }
     maven { url "http://repo1.maven.org/maven2/" }
     maven { url "https://maven.alfresco.com/nexus/content/groups/public" }
     maven { url "https://app.camunda.com/nexus/content/groups/public" }
     maven { url "http://git.oschina.net/thinkgem/repos/raw/master" }
     maven { url "https://raw.github.com/thinkgem/repository/master" }     
}


ext {
	springVersion='4.0.8.RELEASE'
	shiroVersion='1.2.3'
	activitiVersion='5.15.1'
	slf4jVersion='1.7.7'
	jacksonVersion='2.2.3'
	poiVersion='3.9'
	ckfinderVersion='2.3'
}

//包依赖管理
dependencies {
	//工程libs目录下的离线jar包
	compile fileTree(dir: 'libs', include: '*.jar')  
	
	//Spring依赖包
	compile(
		'org.springframework:spring-beans:'+springVersion,
		'org.springframework:spring-context:'+springVersion,
		'org.springframework:spring-context-support:'+springVersion,
		'org.springframework:spring-tx:'+springVersion,
		'org.springframework:spring-orm:'+springVersion,
		'org.springframework:spring-jdbc:'+springVersion,
		'org.springframework:spring-web:'+springVersion,	
		'org.springframework:spring-webmvc:'+springVersion,
		'org.springframework:spring-oxm:'+springVersion
	)
	compile('org.springframework:spring-core:'+springVersion) {
		exclude(module: 'commons-logging')
    }
    compile('org.springframework:spring-aop:'+springVersion) {
		exclude(module: 'commons-logging')
    }
    
    
    //apache shiro依赖包
    compile(
    	'org.apache.shiro:shiro-core:'+shiroVersion,
    	'org.apache.shiro:shiro-spring:'+shiroVersion,
    	'org.apache.shiro:shiro-web:'+shiroVersion,
    	'org.apache.shiro:shiro-ehcache:'+shiroVersion
    )
    compile('org.apache.shiro:shiro-cas:'+shiroVersion) {
		exclude(module: 'commons-logging')
    }
    
    //mybatis
    compile(
    	'org.mybatis:mybatis:3.2.8',
    	'org.mybatis:mybatis-spring:1.2.2',
    )
    
    
    //数据库 、alibaba druid数据库连接池
    compile(
    	'com.alibaba:druid:1.0.11',
    	'mysql:mysql-connector-java:5.1.30'
    )
    
    
    
    //aspectj
    compile(
    	'org.aspectj:aspectjrt:1.7.4',
    	'org.aspectj:aspectjweaver:1.7.4'
    )
    
    //slf4j
    compile(
    	'org.slf4j:slf4j-api:'+slf4jVersion,
    	'org.slf4j:slf4j-log4j12:'+slf4jVersion,
    	'org.slf4j:jcl-over-slf4j:'+slf4jVersion,
    	'org.slf4j:jul-to-slf4j:'+slf4jVersion
    )
    
    //commons
    compile(
    	'org.apache.commons:commons-lang3:3.3.2',
    	'commons-io:commons-io:2.4',
    	'commons-codec:commons-codec:1.9',
    	'commons-fileupload:commons-fileupload:1.3.1'
    )
    compile('commons-beanutils:commons-beanutils:1.9.1') {
		exclude(module: 'commons-logging')
    }
    
    //fasterxml jackson
    compile(
    	'com.fasterxml.jackson.core:jackson-core:'+jacksonVersion,
    	'com.fasterxml.jackson.core:jackson-databind:'+jacksonVersion,
    	'com.fasterxml.jackson.core:jackson-annotations:'+jacksonVersion,
    	'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:'+jacksonVersion
    )
    
    
    //apache poi
    compile(
    	'org.apache.poi:poi:'+poiVersion,
    	'org.apache.poi:poi-ooxml:'+poiVersion,
    	'org.apache.poi:poi-ooxml-schemas:'+poiVersion
    )
    
    //ckfinder
    compile(
    	'com.ckfinder:apache-ant-zip:'+ckfinderVersion,
    	'com.ckfinder:ckfinder:'+ckfinderVersion,
    	'com.ckfinder:ckfinderplugin-fileeditor:'+ckfinderVersion,
    	'com.ckfinder:ckfinderplugin-imageresize:'+ckfinderVersion
    )
    
    //cache
    compile(
    	'net.sf.ehcache:ehcache-core:2.6.9',
    	'net.sf.ehcache:ehcache-web:2.0.4',
    	'redis.clients:jedis:2.5.1'
    )
    
    //mail
    compile(
    	'javax.mail:mail:1.4.7'
    )
    
    //httpclient
    compile(
    	'org.apache.httpcomponents:httpclient:4.2.6',
    	'org.apache.httpcomponents:httpmime:4.2.3'
    )
    
    //其他
    compile(
   	 	'org.hibernate:hibernate-validator:5.1.1.Final',
   	 	'cglib:cglib:3.1',
   	 	'opensymphony:sitemesh:2.4.2',
   	 	'taglibs:standard:1.1.2',
   	 	'javax.servlet:jstl:1.2',
   	 	'com.google.guava:guava:17.0',
   	 	'com.thoughtworks.xstream:xstream:1.4.7',
   	 	'net.sf.dozer:dozer:5.5.1',
   	 	'org.freemarker:freemarker:2.3.20',
   	 	'javax.activation:activation:1.1.1',
   	 	'com.drewnoakes:metadata-extractor:2.6.2',
   	 	'com.google.zxing:core:2.2',
   	 	'com.google.zxing:javase:2.2',
   	 	'org.wltea:analyzer:2012_u6',
   	 	'net.coobird:thumbnailator:0.4.2',
   	 	'bitwalker:UserAgentUtils:1.13',
   	 	'org.springframework:spring-test:4.0.8.RELEASE',
   	 	'net.sourceforge.jtds:jtds:1.3.1',
   	 	'com.alibaba:fastjson:1.1.41'
    )
    
     providedCompile(
       'javax.servlet:servlet-api:2.5', // 编译期
       'javax.servlet:jsp-api:2.0'
     )
	
	testCompile(
		'junit:junit:4.11'
	)
}

//执行gradle uatWar打uat环境war包(cms_uat)
task uatWar(type: War){  
		baseName ="cms"
    from("$projectDir/src/main/resources") {  
        include "**/*" 
        into("WEB-INF/classes")  
    }  
    from("$projectDir/src/main/uatRes") {  
        include "*.properties"  
        into("WEB-INF/classes")  
    }   
}

//执行gradle testWar打测试环境war包(cms_test)
task testWar(type: War){  
		baseName ="cms"
    from("$projectDir/src/main/resources") {  
        include "**/*" 
        into("WEB-INF/classes")  
    }  
    from("$projectDir/src/main/testRes") {  
        include "*.properties"  
        into("WEB-INF/classes")  
    }   
}